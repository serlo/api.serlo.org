type Notification {
  id: Int!
  unread: Boolean!
  event: AbstractNotificationEvent
  email: Boolean!
  emailSent: Boolean!
}

interface AbstractNotificationEvent {
  id: Int!
  instance: Instance!
  date: DateTime!
  actor: User!
  objectId: Int!
}

extend type Query {
  events(
    after: String
    first: Int
    actorId: Int
    actorUsername: String
    objectId: Int
    instance: Instance
  ): AbstractNotificationEventConnection!
  notifications(
    after: String
    first: Int
    emailSent: Boolean
    email: Boolean
    unread: Boolean
    userId: Int
  ): NotificationConnection!
  notificationEvent(id: Int!): AbstractNotificationEvent
}

extend type Mutation {
  notification: NotificationMutation!
}

type NotificationMutation {
  setState(input: NotificationSetStateInput!): DefaultResponse
}

input NotificationSetStateInput {
  id: [Int!]!
  unread: Boolean!
}

type NotificationConnection {
  nodes: [Notification!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type AbstractNotificationEventConnection {
  nodes: [AbstractNotificationEvent!]!
  pageInfo: PageInfo!
}
