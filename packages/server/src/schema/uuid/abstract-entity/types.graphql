interface AbstractEntity {
  # extends AbstractUuid
  id: Int!
  alias: String!
  trashed: Boolean!
  title: String!

  events(
    after: String
    first: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!

  # extends ThreadAware
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!

  date: DateTime!
  instance: Instance!
  licenseId: Int!

  currentRevision: AbstractEntityRevision
  revisions(
    after: String
    first: Int
    unrevised: Boolean
  ): AbstractEntityRevisionConnection!
}

interface AbstractEntityRevisionConnection {
  nodes: [AbstractEntityRevision!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

interface AbstractEntityRevision {
  # extends AbstractUuid
  id: Int!
  trashed: Boolean!
  alias: String!
  title: String!

  events(
    after: String
    first: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!

  # extends ThreadAware
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!

  # Implicitly has the following field
  # repository: AbstractRepository!
  author: User!
  date: DateTime!
  content: String!

  repository: AbstractEntity!
  changes: String!

  # optional fields that we should get rid of or generalize in the long term :)
  metaTitle: String
  metaDescription: String

  url: String
}

type AbstractEntityConnection {
  nodes: [AbstractEntity!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

extend type Query {
  entity: EntityQuery
}

type EntityQuery {
  deletedEntities(
    first: Int
    after: String
    instance: Instance
  ): DeletedEntityConnection!
}

type DeletedEntity {
  dateOfDeletion: String
  entity: AbstractEntity
}

type DeletedEntityConnection {
  nodes: [DeletedEntity!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

extend type Mutation {
  entity: EntityMutation!
}

type EntityMutation {
  setAbstractEntity(input: SetAbstractEntityInput!): SetEntityResponse!
  updateLicense(input: EntityUpdateLicenseInput!): DefaultResponse!
  checkoutRevision(input: CheckoutRevisionInput!): DefaultResponse!
  rejectRevision(input: RejectRevisionInput!): DefaultResponse!
  sort(input: EntitySortInput!): DefaultResponse!
}

input SetAbstractEntityInput {
  entityType: String!

  changes: String!
  subscribeThis: Boolean!
  subscribeThisByEmail: Boolean!
  needsReview: Boolean!
  entityId: Int
  parentId: Int

  content: String
  title: String
  metaDescription: String
  metaTitle: String
  url: String
}

type SetEntityResponse {
  record: AbstractEntity
  success: Boolean!
  query: Query!
}

input EntityUpdateLicenseInput {
  entityId: Int!
  licenseId: Int!
}

input CheckoutRevisionInput {
  revisionId: Int!
  reason: String!
}

input RejectRevisionInput {
  revisionId: Int!
  reason: String!
}

input EntitySortInput {
  entityId: Int!
  childrenIds: [Int!]!
}
