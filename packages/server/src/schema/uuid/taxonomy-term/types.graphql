enum TaxonomyTermType {
  root
  subject
  topic
  exerciseFolder
}

type TaxonomyTerm implements AbstractUuid & InstanceAware & ThreadAware {
  id: Int!
  trashed: Boolean!
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!
  type: TaxonomyTermType!
  instance: Instance!
  alias: String!
  title: String!
  name: String!
  description: String
  weight: Int!
  parent: TaxonomyTerm
  taxonomyId: Int!
  children(
    after: String
    before: String
    first: Int
    last: Int
  ): AbstractUuidConnection!
}

extend type Mutation {
  taxonomyTerm: TaxonomyTermMutation!
}

type TaxonomyTermMutation {
  create(input: TaxonomyTermCreateInput!): TaxonomyTermCreateResponse!
  createEntityLinks(
    input: TaxonomyEntityLinksInput!
  ): TaxonomyEntityLinksResponse!
  deleteEntityLinks(
    input: TaxonomyEntityLinksInput!
  ): TaxonomyEntityLinksResponse!
  sort(input: TaxonomyTermSortInput!): TaxonomyTermSortResponse!
  setNameAndDescription(
    input: TaxonomyTermSetNameAndDescriptionInput!
  ): TaxonomyTermSetNameAndDescriptionResponse!
}

enum TaxonomyTypeCreateOptions {
  topic
  exerciseFolder
}

input TaxonomyTermCreateInput {
  parentId: Int!
  taxonomyType: TaxonomyTypeCreateOptions!
  name: String!
  description: String
}

type TaxonomyTermCreateResponse {
  record: TaxonomyTerm
  success: Boolean!
  query: Query!
}

input TaxonomyEntityLinksInput {
  entityIds: [Int!]!
  taxonomyTermId: Int!
}

type TaxonomyEntityLinksResponse {
  success: Boolean!
  query: Query!
}

input TaxonomyTermSortInput {
  childrenIds: [Int!]!
  taxonomyTermId: Int!
}

type TaxonomyTermSortResponse {
  success: Boolean!
  query: Query!
}

input TaxonomyTermSetNameAndDescriptionInput {
  id: Int!
  name: String!
  description: String
}

type TaxonomyTermSetNameAndDescriptionResponse {
  success: Boolean!
  query: Query!
}
