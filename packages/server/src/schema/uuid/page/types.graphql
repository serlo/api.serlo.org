type Page implements AbstractUuid & AbstractRepository & InstanceAware & ThreadAware {
  id: Int!
  trashed: Boolean!
  threads(
    after: String
    first: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadConnection!
  events(
    after: String
    first: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!
  date: DateTime!
  instance: Instance!
  alias: String!
  title: String!
  licenseId: Int!
  currentRevision: PageRevision
  revisions(
    after: String
    first: Int
    unrevised: Boolean
  ): PageRevisionConnection!
}

type PageRevision implements AbstractUuid & AbstractRevision & ThreadAware {
  id: Int!
  author: User!
  trashed: Boolean!
  alias: String!
  threads(
    after: String
    first: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadConnection!
  events(
    after: String
    first: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!
  date: DateTime!
  title: String!
  content: String!
  repository: Page!
}

type PageRevisionConnection {
  nodes: [PageRevision!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

extend type Mutation {
  page: PageMutation!
}

type PageMutation {
  addRevision(input: PageAddRevisionInput!): DefaultResponse!
  checkoutRevision(input: CheckoutRevisionInput!): DefaultResponse!
  create(input: CreatePageInput!): DefaultResponse!
}

extend type Query {
  page: PageQuery!
}

type PageQuery {
  pages(instance: Instance): [Page!]!
}

input PageAddRevisionInput {
  content: String!
  pageId: Int!
  title: String!
}

input CreatePageInput {
  content: String!
  discussionsEnabled: Boolean!
  instance: Instance!
  licenseId: Int!
  title: String!
  forumId: Int
}
