type User implements AbstractUuid & ThreadAware {
  id: Int!
  trashed: Boolean!
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadsConnection!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
  ): AbstractNotificationEventConnection!
  eventsByUser(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    objectId: Int
  ): AbstractNotificationEventConnection!
  activityByType: UserActivityByType!
  alias: String!
  title: String!
  username: String!
  imageUrl: String!
  language: Instance
  date: DateTime!
  chatUrl: String
  lastLogin: DateTime
  roles(
    after: String
    before: String
    first: Int
    last: Int
  ): ScopedRoleConnection!
  description: String
  motivation: String
  isActiveAuthor: Boolean!
  isActiveDonor: Boolean!
  isActiveReviewer: Boolean!
  isNewAuthor: Boolean!
  unrevisedEntities(
    after: String
    before: String
    first: Int
    last: Int
  ): AbstractEntityConnection!
}

extend type Query {
  user: UserQuery!
}

type UserQuery {
  potentialSpamUsers(first: Int, after: String): UserConnection!
  usersByRole(
    role: Role!
    instance: Instance
    first: Int
    after: String
  ): UserWithPermissionsConnection!
}

type UserWithPermissionsConnection {
  permissions: [String!]!
  inheritance: [Role!]

  # extends UserConnection
  edges: [UserEdge!]!
  nodes: [User!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserActivityByType {
  edits: Int!
  comments: Int!
  reviews: Int!
  taxonomy: Int!
}

extend type Mutation {
  user: UserMutation!
}

type UserMutation {
  addRole(input: UserRoleInput!): UserRoleResponse!
  deleteBots(input: UserDeleteBotsInput!): UserDeleteBotsResponse!
  deleteRegularUsers(
    input: UserDeleteRegularUsersInput!
  ): [UserDeleteRegularUsersResponse!]!
  removeRole(input: UserRoleInput!): UserRoleResponse!
  setDescription(input: UserSetDescriptionInput!): UserSetDescriptionResponse!
  setEmail(input: UserSetEmailInput!): UserSetEmailResponse!
}

input UserDeleteBotsInput {
  botIds: [Int!]!
}

type UserDeleteBotsResponse {
  success: Boolean!
}

input UserDeleteRegularUsersInput {
  users: [UserDescriptionInput!]!
}

input UserDescriptionInput {
  id: Int!
  username: String!
}

type UserDeleteRegularUsersResponse {
  success: Boolean!
  username: String
  reason: String
}

input UserRoleInput {
  username: String!
  role: Role!
  instance: Instance
}

type UserRoleResponse {
  success: Boolean!
}

input UserSetDescriptionInput {
  description: String!
}

type UserSetDescriptionResponse {
  success: Boolean!
}

input UserSetEmailInput {
  userId: Int!
  email: String!
}

type UserSetEmailResponse {
  success: Boolean!
  username: String!
  email: String!
}
