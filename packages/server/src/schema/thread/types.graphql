enum CommentStatus {
  noStatus
  open
  done
}

type Thread {
  id: String!
  createdAt: DateTime!
  title: String
  archived: Boolean!
  trashed: Boolean!
  object: AbstractUuid!
  comments(
    after: String
    before: String
    first: Int
    last: Int
  ): CommentConnection!
  status: CommentStatus!
}

type Comment implements AbstractUuid {
  id: Int!
  title: String!
  content: String!
  alias: String!
  events(
    after: String
    before: String
    first: Int
    last: Int
    instance: Instance
    actorId: Int
    actorUsername: String
  ): AbstractNotificationEventConnection!
  trashed: Boolean!
  archived: Boolean!
  createdAt: DateTime!
  author: User!
  # This property is only temporarily used to redirect requests of individual comments to its object
  # (Will be deleted when separate Comments module has been deployed)
  # e.g. Comment with id 35695 -> object: Article with id 1573
  # see https://github.com/serlo/serlo.org-cloudflare-worker/issues/152
  legacyObject: AbstractUuid!
}

interface ThreadAware {
  threads(
    after: String
    before: String
    first: Int
    last: Int
    archived: Boolean
    trashed: Boolean
  ): ThreadConnection!
}

type ThreadConnection {
  edges: [ThreadCursor!]!
  nodes: [Thread!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

type ThreadCursor {
  cursor: String!
  node: Thread!
}

type CommentConnection {
  nodes: [Comment!]!
  totalCount: Int!
  pageInfo: PageInfo!
}

extend type Query {
  thread: ThreadQuery!
}

type ThreadQuery {
  allThreads(
    after: String
    first: Int
    instance: Instance
    subjectId: String
    status: CommentStatus
  ): AllThreadsConnection!
}

type AllThreadsConnection {
  edges: [ThreadCursor!]!
  nodes: [Thread!]!
  totalCount: Int!
  pageInfo: HasNextPageInfo!
}

extend type Mutation {
  thread: ThreadMutation!
}

type ThreadMutation {
  createThread(input: ThreadCreateThreadInput!): ThreadCreateThreadResponse!
  createComment(input: ThreadCreateCommentInput!): ThreadCreateCommentResponse!
  editComment(input: ThreadEditCommentInput!): DefaultResponse!
  setThreadArchived(input: ThreadSetThreadArchivedInput!): DefaultResponse!
  setThreadState(input: ThreadSetThreadStateInput!): DefaultResponse!
  setCommentState(input: ThreadSetCommentStateInput!): DefaultResponse!
  setThreadStatus(input: ThreadSetThreadStatusInput!): DefaultResponse!
}

input ThreadCreateThreadInput {
  title: String!
  content: String!
  objectId: Int!
  subscribe: Boolean!
  sendEmail: Boolean!
}

type ThreadCreateThreadResponse {
  record: Thread
  success: Boolean!
  query: Query!
}

input ThreadCreateCommentInput {
  content: String!
  threadId: String!
  subscribe: Boolean!
  sendEmail: Boolean!
}

type ThreadCreateCommentResponse {
  record: Comment
  success: Boolean!
  query: Query!
}

input ThreadEditCommentInput {
  content: String!
  commentId: Int!
}

input ThreadSetThreadArchivedInput {
  id: [String!]!
  archived: Boolean!
}

input ThreadSetThreadStateInput {
  id: [String!]!
  trashed: Boolean!
}

input ThreadSetCommentStateInput {
  id: [Int!]!
  trashed: Boolean!
}

input ThreadSetThreadStatusInput {
  id: [String!]!
  status: CommentStatus!
}
